<?php

namespace App\Http\Controllers;

use App\Mail\ModelCountReport;
use App\Models\VahanOEMModelCount;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use DB;
use Carbon\Carbon;

class VahanDailyUpdatedController extends Controller
{
    public function getModelCount($isAppr)
    {

        // Token generate
        $url = 'https://delhigw.napix.gov.in/nic/parivahan/oauth2/token';
        $postData = [
            'grant_type' => 'client_credentials',
            'scope' => 'napix',
        ];
        $client_id = 'd4561c1a95c23884094ab21239594740';
        $client_secret = 'a4a66266df03568b7336450ae9fbca03';
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type:
        application/x-www-form-urlencoded',
        ]);
        curl_setopt($ch, CURLOPT_USERPWD, $client_id . ':' . $client_secret);
        $response = curl_exec($ch);
        curl_close($ch);
        $responseData = json_decode($response, true);
        $token = $responseData['access_token'];
        // dd($token);
        // Fetch OEM details from the database
        $oemDetails = DB::table('oem_model_master_vahan_use')->select('MORTH_OEM')->distinct()->get();
        $fuelTypes = ["ELECTRIC(BOV)", "PURE EV"];
        $secretKey = '325jfasjFGJKHHjkjf64n8hb7JHGG6w1'; // Ensure this is 16 bytes
        //dd($oemDetails);
        $fromDate = '2024-10-01';
        // $fromDate = '2025-01-12';

        $toDate = $fromDate;

        $lastDate =  Carbon::parse(now())->addDay(-1)->format('Y-m-d');
        $results = [];

        $flags = ['appr', 'unappr'];
        // $tableName = 'vahan_api_model_data_approved_temp_test';
        $tableName = 'vahan_api_model_data_approved_temp';
        $tableNotMatch = 'vahan_api_model_not_matching_data_appr';
        // $tableName = 'vahan_api_model_data_approved';
        if(!$isAppr){
            // $tableName = 'vahan_api_model_data_unapproved';
            $tableName = 'vahan_api_model_data_unapproved_temp';
            $tableNotMatch = 'vahan_api_model_not_matching_data_unappr';
        }

        DB::table($tableName)->truncate();
        DB::table($tableNotMatch)->truncate();
        // DB::table('vahan_api_model_not_matching_data')->truncate();

        while($fromDate <= $lastDate){

            // foreach($flags as $flag){

                foreach ($oemDetails as $oemDetail) {

                    foreach($fuelTypes as $fuel) {
                        // JSON encoding with desired structure
                        $data = json_encode([
                             'oemName' => $oemDetail->MORTH_OEM,
                           // 'oemName' => 'MAHINDRA LAST MILE MOBILITY LTD',
                            // 'oemName' => 'ATHER ENERGY PVT LTD',
                            'fueltype' => $fuel,
                            // 'fueltype' => 'ELECTRIC(BOV)',
                            //'fromDate' => '2024-10-04',
                            // 'toDate' => '2025-01-12',
                           'fromDate' => $fromDate,
                            'toDate' => $toDate,
                            'userPass' => 'Mhiuser01Admin@147'
                        ]);
                
                        // dd($data);
                        // Remove any surrounding double quotes, if necessary
                        $formattedData = trim($data, '"');
                        $encryptedData = $this->encryptData($formattedData, $secretKey);
                        // $decryptedData = $this->decryptData($encryptedData, $secretKey);
        
                        try {
        
                            $postData = json_encode([
                                "clientId" => "mhiuser01admin",
                                "encData" => $encryptedData
                            ]);

                            // dd($postData);

                            // $curlUrl = 'https://staging.parivahan.gov.in/vahanModelCountWS/v1.0/getModelCount';

                            $curlUrl = 'https://delhigw.napix.gov.in/nic/parivahan/vahanModelCountWS/service/getModelCount';

                            // $tableName = 'vahan_api_model_data_approved';
                            $keyName = 'Model_Wise_count';
                            if(!$isAppr){
                            // if($flag == 'unappr'){
                                // $curlUrl = 'https://staging.parivahan.gov.in/vahanModelCountWS/v1.0/getUnapprovedModelCount';
                                $curlUrl = 'https://delhigw.napix.gov.in/nic/parivahan/vahanModelCountWS/service/getUnapprovedModelCount';
                                // $tableName = 'vahan_api_model_data_unapproved';
                                $keyName = 'Model_Wise_unapproved_count';
                            }

                            $ch1 = curl_init();
                            curl_setopt_array($ch1, array(
                                // CURLOPT_URL => 'https://delhigw.napix.gov.in/nic/parivahan/vahanModelCountWS/service/getModelCount',
                                // CURLOPT_URL => 'https://delhigw.napix.gov.in/nic/parivahan/vahanws/service/getDetails',7
                                CURLOPT_URL => $curlUrl,
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => '',
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => 'POST',
                                CURLOPT_POSTFIELDS => $postData,
                                CURLOPT_HTTPHEADER => array(
                                    'Content-Type: application/json',
                                    'Authorization: Bearer ' . $token
                                ),
                                CURLINFO_HEADER_OUT => true // Enable header output tracking
                            ));
                            $response1 = curl_exec($ch1);
        
                                // dd($response1);
                            // Get the complete request info
                            $info = curl_getinfo($ch1);

                            // dd($info);
                            $requestHeaders = curl_getinfo($ch1, CURLINFO_HEADER_OUT);
            
                            // Build and print/log the equivalent cURL command
                            $curlCommand = "curl -X POST '{$info['url']}' \\\n";
                            foreach (explode("\r\n", trim($requestHeaders)) as $headerLine) {
                                if ($headerLine) {
                                    $curlCommand .= " -H \"$headerLine\" \\\n";
                                }
                            }
                            $curlCommand .= " -d '" . json_encode($postData, JSON_UNESCAPED_SLASHES) . "'";
            
                            // Display or log the cURL command for debugging
                            //echo "<pre>Equivalent cURL command:\n" . htmlspecialchars($curlCommand) . "</pre>";
            
                            // Optional: Dump additional response info if needed
                            // dd($curlCommand, $info, $response1);
            
                            curl_close($ch1);
                            // // Decode JSON to get `encData`
                            $responseArray = json_decode($response1, true);

                            // dd($response1);
                            // Extract the encrypted data (encData) from the nested structure
                            // Decode the response and handle the "No Record found" message
                            // $encData = json_decode($responseArray['result']['Model_Wise_count'] ?? '', true)['encData'] ?? null;
                            // $encData = json_decode($responseArray['result']['Model_Wise_unapproved_count'] ?? '', true)['encData'] ?? null;
                            $encData = json_decode($responseArray['result'][$keyName] ?? '', true)['encData'] ?? null;
                      // dd($responseArray,$encData);
            
                            // // Decrypt the data if available
                            $decryptedData = $encData ? $this->decrypt($encData) : null;
                            $decryptedDataArray = json_decode($decryptedData, true); // true for associative array
                            
                        //    dd($postData,$responseArray,$decryptedData,$decryptedDataArray);

                            //  if($decryptedDataArray)
                            //  {
                            //     dd($decryptedDataArray);
                            //     }


                            // Check if the response indicates "No Record found"
                            if (isset($responseArray['params']['message']) && $responseArray['params']['message'] === "No Record found") {
                                $tableDataNoDetails = DB::table("oem_model_master_vahan_use")->where('MORTH_OEM', $oemDetail->MORTH_OEM)->first();
        
                                DB::table($tableNotMatch)->insert([
                                    'oem_id' => $tableDataNoDetails->oem_id,
                                    'vahan_oem_name' => null,
                                    'portal_oem_name' => $tableDataNoDetails->name,
                                    'vahan_model_name' => null,
                                    'portal_model_name' => $tableDataNoDetails->MORTH_MODEL,
                                    'portal_segemt_id' => $tableDataNoDetails->segment_id,
                                    'portal_segment_name' => $tableDataNoDetails->segment_name,
                                    'portal_category_id' => $tableDataNoDetails->vehicle_cat_id,
                                    'portal_category_name' => $tableDataNoDetails->category_name,
                                    'vahan_fuel_type' => $fuel,
                                    'vahan_numberofvehiclesregistered' => 0,
                                    'model_id' => null,
                                    'vahan_date_of_registration' => null,
                                    'response_date' => now(),
                                    'api_from_date' => $fromDate,
                                    'api_to_date' => $toDate,
                                    'message' => 'No Record found from Morth API',
                                    'manufacturing_year' => null,
                                    'manufacturing_month' => null,
                                    'approved_status' => null,
                                    'error_code' => 1
                                ]);
            
                                $results[] = [
                                    'vahan_oem_name' => $oemDetail->MORTH_OEM,
                                    'vahan_fuel_type' => $fuel,
                                    'modelName' => 'N/A',
                                    'vahan_numberofvehiclesregistered' => 0,
                                    'vahan_date_of_registration' => null,
                                    'message' => 'No Record found',
                                    'api_from_date' => $fromDate,
                                    'api_to_date' => $toDate,
                                    'manufacturing_year' => null,
                                    'manufacturing_month' => null,
                                    'approved_status' => null
                                ];
                            } else {
                                if($decryptedData && count($decryptedDataArray) > 0){
                                    // Loop through decrypted data if records are present
                                    foreach ($decryptedDataArray as $data) {
                                        // return response()->json($data);
                                        if (isset($data['oemname'], $data['numberOfVehiclesRegistered'], $data['dateOfRegistration'], $data['fuelType'], $data['modelName'], $data['approvedStatus'], $data['manufacturingYear'], $data['manufacturingMonth'])) {
                                            //Check model name exists in master table or not
                                            $tableData = DB::table("oem_model_master_vahan_use")->where('MORTH_RC_MODEL', $data['modelName'])->first();
                                            
                                            
                                            // $modelDate = DB::table('oem_model_master_vahan_use as ommvu')
                                            //         ->join('model_master as mm', 
                                            //             DB::raw("REPLACE(upper(mm.model_name), ' ', '')"), 
                                            //             '=', 
                                            //             DB::raw("REPLACE(upper(ommvu.model_name), ' ', '')")
                                            //         )
                                            //         ->join('oem_model_details as omd', 'omd.model_id', '=', 'mm.id')
                                            //         ->selectRaw('
                                            //             omd.model_id,
                                            //             MIN(omd.testing_approval_date) AS min_testing_approval_date,
                                            //             MAX(omd.testing_expiry_date) AS max_testing_expiry_date
                                            //         ')
                                            //         ->where('omd.mhi_flag', 'A')
                                            //         ->whereRaw("REPLACE(upper(mm.model_name), ' ', '') = REPLACE(upper(?), ' ', '')", [$data['modelName']])
                                            //         ->groupBy('omd.model_id')
                                            //         ->orderByDesc('max_testing_expiry_date')
                                            //         ->first();
                                                    // ->where(DB::raw("REPLACE(upper(mm.model_name), ' ', '')"), '=', DB::raw("REPLACE(upper(?), ' ', '')"), $data['modelName'])

                                            
                                                $modelDate = DB::table('oem_model_master_vahan_use as ommvu')
                                                    ->join('model_master as mm',
                                                        DB::raw("REPLACE(upper(mm.model_name), ' ', '')"),
                                                        '=',
                                                        DB::raw("REPLACE(upper(ommvu.model_name), ' ', '')")
                                                    )
                                                    ->join('oem_model_details as omd', 'omd.model_id', '=', 'mm.id')
                                                    ->selectRaw('
                                                        MIN(omd.testing_approval_date) AS min_testing_approval_date,
                                                        MAX(omd.testing_expiry_date) AS max_testing_expiry_date
                                                    ')
                                                    ->where('omd.mhi_flag', 'A')
                                                    ->whereRaw("REPLACE(upper(mm.model_name), ' ', '') = REPLACE(upper(?), ' ', '')", [$data['modelName']])
                                                    ->first();
                                 
                                                    $pmeDriveModelId = null;
                                                    if($modelDate && isset($modelDate->max_testing_expiry_date)) {
                                                        $pmeDriveModelId = DB::table('oem_model_details as omd')
                                                        ->select('omd.model_id')
                                                        ->join('model_master as mm', 'mm.id',  '=', 'omd.model_id')
                                                        ->where('omd.mhi_flag', 'A')
                                                        ->whereRaw("REPLACE(upper(mm.model_name), ' ', '') = REPLACE(upper(?), ' ', '')", [$data['modelName']])
                                                        ->where('omd.testing_expiry_date', $modelDate->max_testing_expiry_date)
                                                        ->first();
                                                    }

                                            //checking model name is existing or not in master
                                            if($tableData) {

                                                //checking date of registration is less than april 2024
                                                $dateOfRegistration = Carbon::parse($data["dateOfRegistration"]);

                                                $manufacturingYear = $data['manufacturingYear'];
                                                $manufacturingMonth = $data['manufacturingMonth'];
                                                $dateOfManufacturing = Carbon::parse($manufacturingYear."-".$manufacturingMonth);

                                                $dateThreshold = Carbon::parse('2024-04-01');
                                                // dd($dateOfRegistration, $dateThreshold, $dateOfRegistration < $dateThreshold);

                                                if($dateOfManufacturing >= $dateThreshold) {
                                                    if($modelDate) {
                                                        $testingApprMin = Carbon::parse($modelDate->min_testing_approval_date);
                                                        $testingApprMax = Carbon::parse($modelDate->max_testing_expiry_date);

                                                        if($dateOfRegistration >= $testingApprMin && $dateOfRegistration <= $testingApprMax) { 
                                                            DB::table($tableName)->insert([
                                                                'oem_id' => $tableData->oem_id,
                                                                'vahan_oem_name' => $data['oemname'],
                                                                'portal_oem_name' => $tableData->name,
                                                                'vahan_model_name' => $data['modelName'],
                                                                'portal_model_name' => $tableData->MORTH_MODEL,
                                                                'portal_segemt_id' => $tableData->segment_id,
                                                                'portal_segment_name' => $tableData->segment_name,
                                                                'portal_category_id' => $tableData->vehicle_cat_id,
                                                                'portal_category_name' => $tableData->category_name,
                                                                'vahan_fuel_type' => $data['fuelType'],
                                                                'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                                'model_id' => $pmeDriveModelId ? (int)$pmeDriveModelId->model_id : (int)$tableData->model_id,
                                                                // 'vahan_date_of_registration' => Carbon::createFromTimestampMs($data['dateOfRegistration']),
                                                                'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                                'response_date' => now(),
                                                                'api_from_date' => $fromDate,
                                                                'api_to_date' => $toDate,
                                                                'message' => 'Record found',
                                                                'manufacturing_year' => $data['manufacturingYear'],
                                                                'manufacturing_month' => $data['manufacturingMonth'],
                                                                'approved_status' => $data['approvedStatus']
                                                            ]);
                                                        }else{
                                                            DB::table($tableNotMatch)->insert([
                                                                'oem_id' => $tableData->oem_id,
                                                                'vahan_oem_name' => $data['oemname'],
                                                                'portal_oem_name' => $tableData->name,
                                                                'vahan_model_name' => $data['modelName'],
                                                                'portal_model_name' => $tableData->MORTH_MODEL,
                                                                'portal_segemt_id' => $tableData->segment_id,
                                                                'portal_segment_name' => $tableData->segment_name,
                                                                'portal_category_id' => $tableData->vehicle_cat_id,
                                                                'portal_category_name' => $tableData->category_name,
                                                                'vahan_fuel_type' => $data['fuelType'],
                                                                'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                                'model_id' => $pmeDriveModelId ? (int)$pmeDriveModelId->model_id : (int)$tableData->model_id,
                                                                'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                                'model_testing_approval_date_min' => $modelDate->min_testing_approval_date,
                                                                'model_testing_approval_date_max' => $modelDate->max_testing_expiry_date,
                                                                'response_date' => now(),
                                                                'api_from_date' => $fromDate,
                                                                'api_to_date' => $toDate,
                                                                'message' => 'Date of Registration is not between model testing approval dates',
                                                                'manufacturing_year' => $data['manufacturingYear'],
                                                                'manufacturing_month' => $data['manufacturingMonth'],
                                                                'approved_status' => $data['approvedStatus'],
                                                                'error_code' => 2

                                                            ]);
                                                        }
                                                    }else{
                                                        DB::table($tableNotMatch)->insert([
                                                            'oem_id' => $tableData->oem_id,
                                                            'vahan_oem_name' => $data['oemname'],
                                                            'portal_oem_name' => $tableData->name,
                                                            'vahan_model_name' => $data['modelName'],
                                                            'portal_model_name' => $tableData->MORTH_MODEL,
                                                            'portal_segemt_id' => $tableData->segment_id,
                                                            'portal_segment_name' => $tableData->segment_name,
                                                            'portal_category_id' => $tableData->vehicle_cat_id,
                                                            'portal_category_name' => $tableData->category_name,
                                                            'vahan_fuel_type' => $data['fuelType'],
                                                            'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                            'model_id' => (int)$tableData->model_id,
                                                            'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                            'response_date' => now(),
                                                            'api_from_date' => $fromDate,
                                                            'api_to_date' => $toDate,
                                                            'message' => 'Model testing approval dates not found',
                                                            'manufacturing_year' => $data['manufacturingYear'],
                                                            'manufacturing_month' => $data['manufacturingMonth'],
                                                            'approved_status' => $data['approvedStatus'],
                                                            'error_code' => 3
                                                        ]);
                                                    }
                                                   
                                                }else{
                                                     DB::table($tableNotMatch)->insert([
                                                            'oem_id' => $tableData->oem_id,
                                                            'vahan_oem_name' => $data['oemname'],
                                                            'portal_oem_name' => $tableData->name,
                                                            'vahan_model_name' => $data['modelName'],
                                                            'portal_model_name' => $tableData->MORTH_MODEL,
                                                            'portal_segemt_id' => $tableData->segment_id,
                                                            'portal_segment_name' => $tableData->segment_name,
                                                            'portal_category_id' => $tableData->vehicle_cat_id,
                                                            'portal_category_name' => $tableData->category_name,
                                                            'vahan_fuel_type' => $data['fuelType'],
                                                            'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                            // 'model_id' => ( $modelDate && isset($modelDate->model_id) ) ? (int)$modelDate->model_id : (int)$tableData->model_id,
                                                            'model_id' => $pmeDriveModelId ? (int)$pmeDriveModelId->model_id : (int)$tableData->model_id,
                                                            'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                            'response_date' => now(),
                                                            'api_from_date' => $fromDate,
                                                            'api_to_date' => $toDate,
                                                            'message' => 'Manufacturing Date is less than 1st April 2024',
                                                            'manufacturing_year' => $data['manufacturingYear'],
                                                            'manufacturing_month' => $data['manufacturingMonth'],
                                                            'approved_status' => $data['approvedStatus'],
                                                            'error_code' => 4
                                                    ]);
                                                }
                                                
                    
                                                $results[] = [
                                                    'vahan_oem_name' => $data['oemname'],
                                                    'vahan_fuel_type' => $data['fuelType'],
                                                    'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                    'modelName' => $data['modelName'],
                                                    'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                    'message' => 'Record found',
                                                    'api_from_date' => $fromDate,
                                                    'api_to_date' => $toDate,
                                                    'manufacturing_year' => $data['manufacturingYear'],
                                                    'manufacturing_month' => $data['manufacturingMonth'],
                                                    'approved_status' => $data['approvedStatus']
                                                ];
                                            }else{
                                                DB::table($tableNotMatch)->insert([
                                                    'oem_id' => null,
                                                    'vahan_oem_name' => $data['oemname'],
                                                    'portal_oem_name' =>  $oemDetail->MORTH_OEM,
                                                    'vahan_model_name' => $data['modelName'],
                                                    'portal_model_name' => null,
                                                    'portal_segemt_id' => null,
                                                    'portal_segment_name' => null,
                                                    'portal_category_id' => null,
                                                    'portal_category_name' => null,
                                                    'vahan_fuel_type' => $data['fuelType'],
                                                    'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                    'model_id' => null,
                                                    'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                    'response_date' => now(),
                                                    'api_from_date' => $fromDate,
                                                    'api_to_date' => $toDate,
                                                    'message' => 'Morth Model name not found in master table',
                                                    'manufacturing_year' => $data['manufacturingYear'],
                                                    'manufacturing_month' => $data['manufacturingMonth'],
                                                    'approved_status' => $data['approvedStatus'],
                                                    'error_code' => 5
                                                ]);

                                                $results[] = [
                                                        'vahan_oem_name' => $data['oemname'],
                                                        'vahan_fuel_type' => $data['fuelType'],
                                                        'vahan_numberofvehiclesregistered' => $data['numberOfVehiclesRegistered'],
                                                        'modelName' => $data['modelName'],
                                                        'vahan_date_of_registration' => $data['dateOfRegistration'],
                                                        'manufacturing_year' => $data['manufacturingYear'],
                                                        'manufacturing_month' => $data['manufacturingMonth'],
                                                        'message' => 'Morth Model name not found in master table',
                                                        'api_from_date' => $fromDate,
                                                        'api_to_date' => $toDate,
                                                        'approved_status' => null
                                                ];
            
                                            }
            
                                        } else {

                                            DB::table($tableNotMatch)->insert([
                                                'oem_id' => null,
                                                'vahan_oem_name' => isset($data['oemname']) ? $data['oemname'] : null,
                                                'vahan_fuel_type' => isset($data['fuelType']) ? $data['fuelType'] : null,
                                                'portal_oem_name' =>  $oemDetail->MORTH_OEM,
                                                'vahan_model_name' => isset($data['modelName']) ? $data['modelName'] : null,
                                                'portal_model_name' => null,
                                                'portal_segemt_id' => null,
                                                'portal_segment_name' => null,
                                                'portal_category_id' => null,
                                                'portal_category_name' => null,
                                                'vahan_numberofvehiclesregistered' => isset($data['numberOfVehiclesRegistered']) ? $data['numberOfVehiclesRegistered'] : 0,
                                                'model_id' => null,
                                                // 'vahan_date_of_registration' => Carbon::createFromTimestampMs($data['dateOfRegistration']),
                                                'vahan_date_of_registration' => isset($data['dateOfRegistration']) ? $data['dateOfRegistration'] : null,
                                                'response_date' => now(),
                                                'api_from_date' => $fromDate,
                                                'api_to_date' => $toDate,
                                                'message' => 'Invalid response format',
                                                'manufacturing_year' => isset($data['manufacturingYear']) ? $data['manufacturingYear'] : null,
                                                'manufacturing_month' => isset($data['manufacturingMonth']) ? $data['manufacturingMonth'] : null,
                                                'approved_status' => isset($data['approvedStatus']) ? $data['approvedStatus'] : null,
                                                'error_code' => 6
                                            ]);


                                            $results[] = [
                                                'vahan_oem_name' => isset($data['oemname']) ? $data['oemname'] : 'N/A',
                                                'vahan_fuel_type' => isset($data['fuelType']) ? $data['fuelType'] : 'N/A',
                                                'vahan_numberofvehiclesregistered' => 0,
                                                'modelName' => 'N/A',
                                                'vahan_date_of_registration' => now(),
                                                'manufacturing_year' => isset($data['manufacturingYear']) ? $data['manufacturingYear'] : null,
                                                'manufacturing_month' => isset($data['manufacturingMonth']) ? $data['manufacturingMonth'] : null,
                                                'message' => 'Invalid response format',
                                                'api_from_date' => $fromDate,
                                                'api_to_date' => $toDate,
                                                'approved_status' => isset($data['approvedStatus']) ? $data['approvedStatus'] : null
                                            ];
                                        }
                                    }
                                }else{
                                    // print("no data found!---".$oemDetail->MORTH_OEM."---".$fuel."----".$flag."---".$fromDate."---".$toDate."\n");
                                    print("no data found!---".$oemDetail->MORTH_OEM."---".$fuel."----".'test'."---".$fromDate."---".$toDate."\n");
                                }
                            }
            
                        } catch (\Exception $e) {
                            dd($e->getMessage());
                            return response()->json($e->getMessage());
                            \Log::info('Error while fetching VAHAN API data: '.$e->getMessage());
                        }
                    }
                }
            // }

            $fromDate = Carbon::parse($fromDate)->addDay(+1)->format('Y-m-d');
            $toDate = $fromDate;
        }
       
        return response()->json($results);
    }

    private const ALGO = 'AES-256-CBC';
    private const IV_KEY = '213A26DBB4A358C5'; // Ensure this is 16 bytes for AES-256
    public function encryptData($plainText, $key)
    {
        // Ensure IV is 16 bytes (128 bits)
        $iv = substr(self::IV_KEY, 0, 16);

        // Encrypt the data
        $encryptedData = openssl_encrypt($plainText, self::ALGO, $key, OPENSSL_RAW_DATA, $iv);

        // Encode the encrypted data in Base64
        return base64_encode($encryptedData);
    }

    public function decryptData($cipherText, $key)
    {
        // dd($cipherText,$key);
        // Ensure IV is 16 bytes (128 bits)
        $iv = substr(self::IV_KEY, 0, 16);

        // Decode the Base64 encoded cipher text
        $encryptedData = base64_decode($cipherText);

        // Decrypt the data
        $decryptedData = openssl_decrypt($encryptedData, self::ALGO, $key, OPENSSL_RAW_DATA, $iv);

        // Remove PKCS#5 padding
        return $this->removePadding($decryptedData);
    }

    private function removePadding($data)
    {
        $pad = ord($data[strlen($data) - 1]);
        if ($pad < 1 || $pad > 16) {
            return $data; // No padding
        }
        return substr($data, 0, -$pad);
    }




    // public function encrypt($data)
    // {
    //     // Prepare data as JSON string
    //     //$jsonData = json_encode($data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    //     echo $data . "</br>";
    //     // Encrypt with AES-256-CBC
    //     $encrypted = openssl_encrypt($data, 'AES-256-CBC', '325jfasjFGJKHHjkjf64n8hb7JHGG6w1', OPENSSL_RAW_DATA, '213A26DBB4A358C5');

    //     return base64_encode($encrypted);
    // }
     public function decrypt($encryptedData)
    {
         // Decode the Base64 encoded data
         $data = base64_decode($encryptedData);

         // Decrypt the data using AES-256-CBC with PKCS5 padding
         return openssl_decrypt($data, 'AES-256-CBC', '325jfasjFGJKHHjkjf64n8hb7JHGG6w1', OPENSSL_RAW_DATA, '213A26DBB4A358C5');
    }
}
