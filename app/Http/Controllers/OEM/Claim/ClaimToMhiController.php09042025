<?php

namespace App\Http\Controllers\OEM\Claim;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\ClaimMaster;
use App\Models\ClaimLots;
// use App\ClaimDetail;
use App\Models\BuyerDetail;
use Auth;
use DB;
use Exception;
use Carbon\Carbon;

class ClaimToMhiController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
        // $segMaster = DB::table('segment_master')->pluck('segment_name');
        // $modelMaster = DB::table('model_master')->where('oem_id',Auth::user()->id)->pluck('model_name','id');
        $pid = getParentId();
        $claimMaster = DB::table('claim_master_view')->where('oem_id', $pid)->whereNull('lot_id')->whereNotNull('claim_id')->get();

        // dd($modelMaster);

        return view('oem.claim.claimToMhi', compact('claimMaster'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // Debugging the request data
        // dd($request);
        $pid = getParentId();

        try {
            // $monthCount = ClaimLots::where('oem_id', $pid)->where('claim_month_id', $request->month)->count();

            // if ($monthCount >= 2) {
            //     alert()->warning('You cannot submit more than 2 claims for this month', 'Error')->persistent('Close');
            //     return redirect()->route('claimToMhi.index');
            // }


            $today = Carbon::now();

            

            // Set the start of the week to Monday (Indian standard)
            $weekStart = $today->copy()->startOfWeek(Carbon::MONDAY);
            
            // Get the end of the week (Sunday)
            $weekEnd = $today->copy()->endOfWeek(Carbon::SUNDAY);

            $wStart = $weekStart->toDateString();
            $wEnd = $weekEnd->toDateString();

            $monthCount = ClaimLots::where('oem_id', $pid)->whereBetween('created_at', [$wStart, $wEnd])->where('segment',$request->segment)->count();
            // dd($ monthCount);
            

            if ($monthCount >= 1) {
                alert()->warning('You have already submitted a claim for this week.', 'Error')->persistent('Close');
                return redirect()->route('claimToMhi.index');
            }


            DB::transaction(function () use ($request, $pid) {
                $claimLot = new ClaimLots;
                $claimLot->oem_id = $pid;
                $claimLot->created_by = Auth::user()->id;
                $claimLot->created_at = Carbon::now();
                $claimLot->claim_month_id = $request->month ? $request->month:null;
                $claimLot->save();

                foreach ($request->check as $key => $claim_id) {
                    $claimMaster = ClaimMaster::find($claim_id);
                    if ($claimMaster) {
                        $claimMaster->lot_id = $claimLot->id;
                        $claimMaster->save();

                        // Calculate the expiry date from invoice_dt// add by 02-08-2024
                        $expiryDate = Carbon::now()->subDays(120);

                        BuyerDetail::where('claim_id', $claim_id)
                            ->where('invoice_dt', '<', $expiryDate)
                            ->update(['expiry_120' => 'Y']);
                    }
                }
            });

            alert()->success('Claim Lot Generation Successful', 'Success')->persistent('Close');
            return redirect()->route('claimToMhi.index');
        } catch (Exception $e) {
            // dd($e);
            alert()->error('Error', $e->getMessage())->persistent('Close');
            return redirect()->back()->withInput();
        }
    }




    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        // dd($request);
        $pid = getParentId();
        $array = [];
        // dd($request->check);
        foreach ($request->check as $key => $check) {
            // dd($request->check);
            // $array[] =  $check;
            array_push($array, $check);

        }
        $claimMaster = DB::table('claim_master')->where('oem_id', $pid)->whereIn('id', $array)->whereNull('lot_id')->get();
        $month_id = $request->month;

        return view('oem.claim.claimToMhiShow', compact('claimMaster', 'month_id','request'));
    }
    

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function claimSubmitted()
    {
        $pid = getParentId();
        // dd($pid);
        $claimMaster = DB::table('claim_master_view')->where('oem_id', $pid)->whereNotNull('lot_id')->whereNotNull('claim_id')->get();

        return view('oem.claim.claimSubmitted', compact('claimMaster'));
    }

    public function claimUploadDoc($claimid) {
        
        $claimid = decrypt($claimid);

        $claimDoc = DB::table('claim_master_view')->where('claim_id',$claimid)->first();
    
        return view('oem.claim.claim_upload_doc',compact('claimid','claimDoc'));
    }

    public function claimDocStore(request $request)  {
        // dd($request);

        try {
        $claimid =$request->claimid;
        if($request->hasFile('uadoc_id')) {
            $file1 = $request->uadoc_id;
            $response1 = uploadFileWithCurl($file1);
            
        }
        if($request->hasFile('ipa_id')) {
            $file2 = $request->ipa_id;
            $response2 = uploadFileWithCurl($file2);
          
        }
        if($request->hasFile('ipb_id')) {
            $file3 = $request->ipb_id;
            $response3 = uploadFileWithCurl($file3);
            
        }
        if($request->hasFile('didcu_id')) {
            $file4 = $request->didcu_id;
            $response4 = uploadFileWithCurl($file4);
          
        }
        // dd($response1,$response2,$response3,$response4);

        DB::table('claim_master')->where('id', $claimid)->update([
            "uadoc_id" => $response1,
            "ipa_id" => $response2,
            "ipb_id" => $response3,
            "didcu_id" => $response4,
            "claim_doc_status" => 'D',
            "doc_created_at"=> Carbon::now(),
            "revised_doc_submitted"=> Carbon::now(),
        ]);

        alert()->success('Claim Documents Uploaded Successfully', 'Success')->persistent('Close');
        return redirect()->route('claimSubmitted');
    } catch (Exception $e) {
        // dd($e);
        alert()->error('Error', $e->getMessage())->persistent('Close');
        return redirect()->back()->withInput();
    }


    }

    public function claimDocUpdate(request $request)  {
        // dd($request);

        try {
        $claimid = $request->claimid;
        $check = DB::table('claim_master')->where('id',$claimid)->first();
        // dd($check->uadoc_id,$check->ipa_id,$check->ipb_id,$check->didcu_id);

        if($request->hasFile('uadoc_id')) {
            $file1 = $request->uadoc_id;
            $response1 = uploadFileWithCurl($file1);
            
        }
        if($request->hasFile('ipa_id')) {
            $file2 = $request->ipa_id;
            $response2 = uploadFileWithCurl($file2);
          
        }
        if($request->hasFile('ipb_id')) {
            $file3 = $request->ipb_id;
            $response3 = uploadFileWithCurl($file3);
            
        }
        if($request->hasFile('didcu_id')) {
            $file4 = $request->didcu_id;
            $response4 = uploadFileWithCurl($file4);
          
        }

        if(!$request->hasFile('uadoc_id')) {
            $response1 = $check->uadoc_id;
        }
        if(!$request->hasFile('ipa_id')) {
            $response2 = $check->ipa_id;
        }
        if(!$request->hasFile('ipb_id')) {
            $response3 = $check->ipb_id;
        }
        if(!$request->hasFile('didcu_id')) {
            $response4 = $check->didcu_id;
        }
        // dd($response1,$response2,$response3,$response4);
// if($response1 == null && $response2 == null && $response3 == null && $response4 == null) {
    

        DB::table('claim_master')->where('id', $claimid)->update([
            "uadoc_id" => $response1,
            "ipa_id" => $response2,
            "ipb_id" => $response3,
            "didcu_id" => $response4,
            "claim_doc_status" => 'D',
            "doc_created_at"=> Carbon::now(),
            "revised_doc_submitted"=> Carbon::now(),
        ]);
    // }
        alert()->success('Claim Documents Updated Successfully', 'Success')->persistent('Close');
        return redirect()->route('claimSubmitted');
    } catch (Exception $e) {
        // dd($e);
        alert()->error('Error', $e->getMessage())->persistent('Close');
        return redirect()->back()->withInput();
    }


    }
    public function claimDocSubmit($claimid)  {
        try { 
        DB::table('claim_master')->where('id',$claimid)->update([
            'claim_doc_status' => 'A',
        ]);
        alert()->success('Claim Documents Submitted Successfully', 'Success')->persistent('Close');
        return redirect()->route('claimSubmitted');
    } catch (Exception $e) {
        // dd($e);
        return redirect()->route('claimSubmitted');
        alert()->error('Error', $e->getMessage())->persistent('Close');
        return redirect()->back()->withInput();
    }

    }
    public function revertClaimDoc(request $request) {
        try { 
            DB::table('claim_master')->where('id',$request->claimid)->update([
                'claim_doc_status' => 'D',
            ]);
            alert()->success('Claim Documents Reverted To OEM', 'Success')->persistent('Close');
            return redirect()->route('claimProcessing');
        } catch (Exception $e) {
            // dd($e);
            return redirect()->route('claimProcessing');
            alert()->error('Error', $e->getMessage())->persistent('Close');
            return redirect()->back()->withInput();
        }
    }
}
