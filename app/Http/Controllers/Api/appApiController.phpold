<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Session;

class appApiController extends Controller
{
    private function checkAuthorisation() {
        $headers = getallheaders();
        if (isset($headers['Authorization'])) {
            if ($headers['Authorization']) {
                if (preg_match('/^Basic (.+)$/', $headers['Authorization'], $matches)) {
                    
                    $string = $matches[1];
                    $g_key = env('G_KEY');
                    $g_iv = env('G_IV');

                    $received_basic_auth_string = $string;

                    $decoded_data = base64_decode($received_basic_auth_string);
                    list($hex_encrypted_username, $hex_encrypted_password) = explode(':', $decoded_data);
                    $encrypted_username = hex2bin($hex_encrypted_username);
                    $encrypted_password = hex2bin($hex_encrypted_password);

                    $key = $g_key;
                    $iv = $g_iv;

                    $decrypted_username = openssl_decrypt($encrypted_username, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);

                    $decrypted_password = openssl_decrypt($encrypted_password, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);

                    $timestamp_length = 14;

                    $original_username = substr($decrypted_username, 0, -$timestamp_length);
                    $original_password = substr($decrypted_password, 0, -$timestamp_length);

                    $timestamp = substr($decrypted_username, -$timestamp_length);

                    $timestamp = Carbon::createFromFormat('YmdHis', $timestamp);
                    
                    if (
                        $timestamp->gt(now()->subMinutes(env('AUTH_TIME')))
                        && $original_username == env('G_USERNAME')
                        && $original_password == env('G_PASSWORD')
                        ) {
                            return true;
                        
                    } else {
                        return false;
                        
                    }

                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }

    }

    private function generateXmlResponse(array $data)
    {
        // Create a new XML element
        $xml = new \SimpleXMLElement('<xml/>');

        // Convert data array to XML
        foreach ($data as $key => $value) {
            $xml->addChild($key, $value);
        }

        // Set the response header to application/xml
        return Response::make($xml->asXML(), 200, ['Content-Type' => 'application/xml']);
    }

    public function userverify(Request $request) {

        if(!$this->checkAuthorisation()) {
            return json_encode([
                'status'=>false,
                'message'=>'Invalid username, password or timeout.'
            ]);
        }

        $rawXml = file_get_contents('php://input');

        if ($rawXml) {
            $xml = simplexml_load_string($rawXml, "SimpleXMLElement", LIBXML_NOCDATA);
            
            if ($xml === false) {
                echo "Failed to parse XML";
            } else {
                $json = json_encode($xml);
                $data = json_decode($json, true);
                
                // echo "<pre>";
                // print_r($data);
                
                $key = env('G_KEY');
                $iv = env('G_IV');
                // die($iv);

                $u = base64_decode($data['dealer_username']);
                $p = base64_decode($data['dealer_password']);
                $a = base64_decode($data['aadhaar']);
                $c = base64_decode($data['cpuid']);


                $decrypted_username = openssl_decrypt($u, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);
                $decrypted_password = openssl_decrypt($p, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);
                $aadhar = openssl_decrypt($a, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);
                $cpuid = openssl_decrypt($c, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $iv);

                $user = DB::table('users')->where('username', $decrypted_username)->first();
                
                if (password_verify($decrypted_password, $user->password)) {

                    Session::put('session_token', Str::random(32));
                    $data = [
                        'status' => 'success',
                        'message' => 'Dealer verification successful',
                        'dealer_id' => $user->dealer_code,
                        'dealer_name' => $user->name,
                        'dealer_location' => '',
                        'session_token' =>Session::get('session_token'),
                    ];
                    return $this->generateXmlResponse($data);


                } else {
                    $data = [
                        'status' => 'fail',
                        'message' => 'Dealer verification failed',
                    ];
                    return $this->generateXmlResponse($data);
                }
                

                
            }
        } else {
            $data = [
                'status' => 'fail',
                'message' => 'Dealer verification failed',
            ];
            return $this->generateXmlResponse($data);
        }






    }
}
