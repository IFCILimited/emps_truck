<?php

namespace App\Http\Controllers\oem;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\OemBatteryDetail;
use App\OemModelDetail;
use App\OemModelPerformDetail;
use App\OemVehicleCriteria;
use Auth;
use DB;
use App\User;
use App\DocumentUpload;
use Carbon\Carbon;
use App\OemModelMaster;
use Exception;

class OemModelController extends Controller
{

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // $user = User::where('id',Auth::user()->id)->first();
        $segment = DB::table('segment_master')->where('active', '1')->get();
        $oemMOdelDetail = User::join('model_master', 'users.id', '=', 'model_master.oem_id')
            ->join('oem_model_details', 'model_master.id', '=', 'oem_model_details.model_id')
            ->where('model_master.oem_id', Auth::user()->id)
            ->get([
                'model_master.id as model_id',
                'model_master.*',
                'oem_model_details.id as model_detail_id',
                'oem_model_details.*',
            ]);
        // dd($oemMOdelDetail);
        return view('oem.manage_model.oem_model', compact('oemMOdelDetail','segment'));
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $user=Auth::user();
        // 5 is Testing Agency Role
        //$user = User::first();
         $agency = DB::table("users as u")
         ->join("model_has_roles as mhr", "u.id", "=", "mhr.model_id")
         ->select("u.*", "mhr.*")
         ->where("mhr.role_id", "=", 5)
         ->get();
        $segment = DB::table('segment_master')->where('active', '1')->get();

     
        return view('oem.manage_model.oem_model_create', compact('user', 'agency','segment'));

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // $user=Auth::user();
        $user_id = Auth::user()->id;
        // dd($request);

        // $appMast = OemModelDetail::where('created_by','=',$user->id)->first();

        try {
            DB::transaction(function () use ($request, $user_id) {

                $oemModelmaster = new OemModelMaster;
                $oemModelmaster->oem_id = $user_id;
                $oemModelmaster->model_name = $request->ev_model_name;
                // $oemModelmaster->model_code = $request->ev_model_code;
                $oemModelmaster->variant_name = $request->variant_name;
                $oemModelmaster->vehicle_cat_id = $request->vehicle_category;
                $oemModelmaster->segment_id = $request->vehicle_segment;
                $oemModelmaster->model_status = 'active';

                // if ($request->hasFile('vehicle_img')) {

                //     $file = $request->vehicle_img;
                //     $response = uploadFileWithCurl($file);

                // }

                
                if ($request->hasFile('vehicle_img')) {
                    $vehicle_img_fileName = $request->vehicle_img->getClientOriginalName();
                    $vehicle_img_mime = $request->vehicle_img->getMimeType();
                    $vehicle_img_fileSize = $request->vehicle_img->getSize();
                    $vehicle_img_fileContent = fopen($request->vehicle_img->getRealPath(), 'r');

                    $vehicle_img = new DocumentUpload();
                    $vehicle_img->file_name = $vehicle_img_fileName;
                    $vehicle_img->mime = $vehicle_img_mime;
                    $vehicle_img->file_size = $vehicle_img_fileSize;
                    $vehicle_img->uploaded_file = $vehicle_img_fileContent;
                    // dd($vehicle_img);
                    $vehicle_img->save();

                }
                $oemModelmaster->vehicle_img_upload_id = isset ($vehicle_img) ? $vehicle_img->id : null;
                $oemModelmaster->save();


                $oemModelDetail = new OemModelDetail;
                $oemModelDetail->oem_id = $user_id;
                $oemModelDetail->model_id = $oemModelmaster->id;
                $oemModelDetail->model_type = $request->model_type;
                $oemModelDetail->status = 'D';

                $oemModelDetail->testing_agency_id = $request->testing_agency;
                $oemModelDetail->meeting_tech_function = $request->meeting_ev_tech;
                $oemModelDetail->meeting_qualif = $request->meeting_qualify_tar;
                $oemModelDetail->vehicle_sub_to_test_agency_apprv = $request->date_vehicle_submission;
                $oemModelDetail->tech_type = $request->tech_type;
                $oemModelDetail->factory_price = $request->ex_factory_price;
                $oemModelDetail->battery_type = $request->battery_type;


                $oemModelDetail->spec_density = $request->specific_density;
                $oemModelDetail->life_cyc = $request->life_cycle;
                $oemModelDetail->no_of_battery = $request->battery_cat_repulsion;
                $oemModelDetail->bat_1 = ($request->bat_1) ? $request->bat_1 : null;
                $oemModelDetail->bat_2 = ($request->bat_2) ? $request->bat_2 : null;
                $oemModelDetail->bat_3 = ($request->bat_3) ? $request->bat_3 : null;
                $oemModelDetail->bat_4 = ($request->bat_4) ? $request->bat_4 : null;
                $oemModelDetail->bat_5 = ($request->bat_5) ? $request->bat_5 : null;
                $oemModelDetail->bat_6 = ($request->bat_6) ? $request->bat_6 : null;
                $oemModelDetail->bat_7 = ($request->bat_7) ? $request->bat_7 : null;
                $oemModelDetail->bat_8 = ($request->bat_8) ? $request->bat_8 : null;
                $oemModelDetail->bat_9 = ($request->bat_9) ? $request->bat_9 : null;
                $oemModelDetail->bat_10 = ($request->bat_10) ? $request->bat_10 : null;
                $oemModelDetail->tot_energy = $request->total_energy_capacity;
                $oemModelDetail->battery_make = $request->battery_make;
                $oemModelDetail->battery_capacity = $request->battery_capacity;

                $oemModelDetail->range = $request->specific_density;
                $oemModelDetail->max_elect_consumption = $request->max_electric_energy_consumption;
                $oemModelDetail->min_max_speed = $request->minimax_speed;
                $oemModelDetail->min_acceleration = $request->minimum_acceleration;
                $oemModelDetail->monitoring_device_fitment = $request->monitor_device_fitment;
                $oemModelDetail->company_name = $request->company_name;
                $oemModelDetail->device_id = $request->device_id;
                $oemModelDetail->min_ex_show_price = $request->min_exshowrromprice;
                $oemModelDetail->estimate_incentive_amount = $request->estimat_incentive_amt;


                // if ($request->hasFile('model_compli_certificate')) {

                //     $file = $request->model_compli_certificate;
                //     $response = uploadFileWithCurl($file);

                // }

                if ($request->hasFile('model_compli_certificate')) {
                    $model_compli_certificate_fileName = $request->model_compli_certificate->getClientOriginalName();
                    $model_compli_certificate_mime = $request->model_compli_certificate->getMimeType();
                    $model_compli_certificate_fileSize = $request->model_compli_certificate->getSize();
                    $model_compli_certificate_fileContent = fopen($request->model_compli_certificate->getRealPath(), 'r');

                    $model_compli_certificate = new DocumentUpload();
                    $model_compli_certificate->file_name = $model_compli_certificate_fileName;
                    $model_compli_certificate->mime = $model_compli_certificate_mime;
                    $model_compli_certificate->file_size = $model_compli_certificate_fileSize;
                    $model_compli_certificate->uploaded_file = $model_compli_certificate_fileContent;
                    // dd($vehicle_img);
                    $model_compli_certificate->save();
                }

                $oemModelDetail->compliance_upload_id = isset ($model_compli_certificate) ? $model_compli_certificate->id : null;
                $oemModelDetail->save();
            });

            $oemModelmaster = OemModelMaster::Where('oem_id', $user_id)->orderBy('id', 'desc')->first();
            alert()->success('Record Inserted', 'Success!')->persistent('Close');
            return redirect()->route('oemModel.edit', encrypt($oemModelmaster->id));
        } catch (Exception $e) {
             alert()->error('Something Went Wrong', 'warning!')->persistent('Close');
              return redirect()->back();
         }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
       // 5 is Testing Agency Role
	$id = decrypt($id);
       $user = User::where('id',Auth::user()->id)->first();
    //    $agency = DB::table("users as u")
    //    ->join("model_has_roles as mhr", "u.id", "=", "mhr.model_id")
    //    ->select("u.*", "mhr.*")
    //    ->where("mhr.role_id", "=", 5)
    //    ->get();
        // $oemMOdelDetail = OemModelMaster::join('oem_model_details', 'model_master.id', '=', 'oem_model_details.model_id')
        //     ->where('model_master.id', $id)
        //     ->first([
        //         'model_master.id as model_id',
        //         'model_master.*',
        //         'oem_model_details.id as model_detail_id',
        //         'oem_model_details.*'
        //     ]);

            $oemMOdelDetail = DB::table('vw_model_details')->where('model_id', $id)->where('oem_id',Auth::user()->id)->first();

        // dd($oemMOdelDetail);
        return view('oem.manage_model.oem_model_view', compact('user', 'oemMOdelDetail'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        // 5 is Testing Agency Role
        $id = decrypt($id);
        $user = User::where('id',Auth::user()->id)->first();
       $agency = DB::table("users as u")
       ->join("model_has_roles as mhr", "u.id", "=", "mhr.model_id")
       ->select("u.*", "mhr.*")
       ->where("mhr.role_id", "=", 5)
       ->get();
        // $oemMOdelDetail = OemModelMaster::join('oem_model_details', 'model_master.id', '=', 'oem_model_details.model_id')
        //     ->where('model_master.id', $id)
        //     ->first([
        //         'model_master.id as model_id',
        //         'model_master.*',
        //         'oem_model_details.id as model_detail_id',
        //         'oem_model_details.*'
        //     ]);


        $oemMOdelDetail = DB::table('vw_model_details')->where('model_id', $id)->where('oem_id',Auth::user()->id)->first();

	    $segment = DB::table('segment_master')->where('active', '1')->get();
        $categories = DB::table('category_master')->where('active', '1')->get();
        // dd($oemMOdelDetail);
        return view('oem.manage_model.oem_model_edit', compact('user', 'oemMOdelDetail', 'agency','segment','categories'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        // dd($request);

        $id = decrypt($id);

        $user_id = Auth::user()->id;

        try {
            DB::transaction(function () use ($request, $id, $user_id) {

                $oemModelmaster = OemModelMaster::find($id);
                $oemModelmaster->oem_id = $user_id;
                $oemModelmaster->model_name = $request->ev_model_name;
                // $oemModelmaster->model_code = $request->ev_model_code;
                $oemModelmaster->variant_name = $request->variant_name;
                $oemModelmaster->vehicle_cat_id = $request->vehicle_category;
                $oemModelmaster->segment_id = $request->vehicle_segment;

                // if($request->vechicle_upload_id == null && $request->hasFile('vehicle_img')){
                // if ($request->hasFile('vehicle_img')) {

                //     $file = $request->vehicle_img;
                //     $response = uploadFileWithCurl($file);
                //     $oemModelmaster->vehicle_img_upload_id = $response;

                // }


                if ($request->hasFile('vehicle_img') && isset ($request->vechicle_upload_id)) {
                    $vehicle_img_fileName = $request->vehicle_img->getClientOriginalName();
                    $vehicle_img_mime = $request->vehicle_img->getMimeType();
                    $vehicle_img_fileSize = $request->vehicle_img->getSize();
                    $vehicle_img_fileContent = fopen($request->vehicle_img->getRealPath(), 'r');

                    $vehicle_img = DocumentUpload::find($request->vechicle_upload_id);
                    $vehicle_img->file_name = $vehicle_img_fileName;
                    $vehicle_img->mime = $vehicle_img_mime;
                    $vehicle_img->file_size = $vehicle_img_fileSize;
                    $vehicle_img->uploaded_file = $vehicle_img_fileContent;
                    // dd($vehicle_img);
                    $vehicle_img->save();

                }

                if($request->vechicle_upload_id == null && $request->hasFile('vehicle_img')){
                    $vehicle_img_fileName = $request->vehicle_img->getClientOriginalName();
                    $vehicle_img_mime = $request->vehicle_img->getMimeType();
                    $vehicle_img_fileSize = $request->vehicle_img->getSize();
                    $vehicle_img_fileContent = fopen($request->vehicle_img->getRealPath(), 'r');

                    $vehicle_img = new DocumentUpload();
                    $vehicle_img->file_name = $vehicle_img_fileName;
                    $vehicle_img->mime = $vehicle_img_mime;
                    $vehicle_img->file_size = $vehicle_img_fileSize;
                    $vehicle_img->uploaded_file = $vehicle_img_fileContent;
                    // dd($vehicle_img);
                    $vehicle_img->save();

                    $oemModelmaster->vehicle_img_upload_id = $vehicle_img->id;

                }

                $oemModelmaster->save();

                $oemModelDetail = OemModelDetail::find($request->id);
                $oemModelDetail->model_type = $request->model_type;
                // $oemModelDetail->status = 'D';

                $oemModelDetail->testing_agency_id = $request->testing_agency;
                $oemModelDetail->meeting_tech_function = $request->meeting_ev_tech;
                $oemModelDetail->meeting_qualif = $request->meeting_qualify_tar;
                $oemModelDetail->vehicle_sub_to_test_agency_apprv = $request->date_vehicle_submission;
                $oemModelDetail->tech_type = $request->tech_type;
                $oemModelDetail->factory_price = $request->ex_factory_price;
                $oemModelDetail->battery_type = $request->battery_type;


                $oemModelDetail->spec_density = $request->specific_density;
                $oemModelDetail->life_cyc = $request->life_cycle;
                $oemModelDetail->no_of_battery = $request->battery_cat_repulsion;
                $oemModelDetail->bat_1 = ($request->bat_1) ? $request->bat_1 : null;
                $oemModelDetail->bat_2 = ($request->bat_2) ? $request->bat_2 : null;
                $oemModelDetail->bat_3 = ($request->bat_3) ? $request->bat_3 : null;
                $oemModelDetail->bat_4 = ($request->bat_4) ? $request->bat_4 : null;
                $oemModelDetail->bat_5 = ($request->bat_5) ? $request->bat_5 : null;
                $oemModelDetail->bat_6 = ($request->bat_6) ? $request->bat_6 : null;
                $oemModelDetail->bat_7 = ($request->bat_7) ? $request->bat_7 : null;
                $oemModelDetail->bat_8 = ($request->bat_8) ? $request->bat_8 : null;
                $oemModelDetail->bat_9 = ($request->bat_9) ? $request->bat_9 : null;
                $oemModelDetail->bat_10 = ($request->bat_10) ? $request->bat_10 : null;
                $oemModelDetail->tot_energy = $request->total_energy_capacity;
                $oemModelDetail->battery_make = $request->battery_make;
                $oemModelDetail->battery_capacity = $request->battery_capacity;

                $oemModelDetail->range = $request->specific_density;
                $oemModelDetail->max_elect_consumption = $request->max_electric_energy_consumption;
                $oemModelDetail->min_max_speed = $request->minimax_speed;
                $oemModelDetail->min_acceleration = $request->minimum_acceleration;
                $oemModelDetail->monitoring_device_fitment = $request->monitor_device_fitment;
                $oemModelDetail->company_name = $request->company_name;
                $oemModelDetail->device_id = $request->device_id;
                $oemModelDetail->min_ex_show_price = $request->min_exshowrromprice;
                $oemModelDetail->estimate_incentive_amount = $request->estimat_incentive_amt;

                // if($request->compliance_doc_id == null && $request->hasFile('model_compli_certificate')){
                // if ($request->hasFile('model_compli_certificate')) {

                //     $file = $request->model_compli_certificate;
                //     $response = uploadFileWithCurl($file);
                //     $oemModelDetail->compliance_upload_id = $response;

                // }

                if ($request->hasFile('model_compli_certificate') && isset ($request->compliance_doc_id)) {
                    $model_compli_certificate_fileName = $request->model_compli_certificate->getClientOriginalName();
                    $model_compli_certificate_mime = $request->model_compli_certificate->getMimeType();
                    $model_compli_certificate_fileSize = $request->model_compli_certificate->getSize();
                    $model_compli_certificate_fileContent = fopen($request->model_compli_certificate->getRealPath(), 'r');

                    $model_compli_certificate = DocumentUpload::find($request->compliance_doc_id);
                    $model_compli_certificate->file_name = $model_compli_certificate_fileName;
                    $model_compli_certificate->mime = $model_compli_certificate_mime;
                    $model_compli_certificate->file_size = $model_compli_certificate_fileSize;
                    $model_compli_certificate->uploaded_file = $model_compli_certificate_fileContent;
                    // dd($vehicle_img);
                    $model_compli_certificate->save();
                }

                if($request->compliance_doc_id == null && $request->hasFile('model_compli_certificate')){
                    $model_compli_certificate_fileName = $request->model_compli_certificate->getClientOriginalName();
                    $model_compli_certificate_mime = $request->model_compli_certificate->getMimeType();
                    $model_compli_certificate_fileSize = $request->model_compli_certificate->getSize();
                    $model_compli_certificate_fileContent = fopen($request->model_compli_certificate->getRealPath(), 'r');

                    $model_compli_certificate = new DocumentUpload();
                    $model_compli_certificate->file_name = $model_compli_certificate_fileName;
                    $model_compli_certificate->mime = $model_compli_certificate_mime;
                    $model_compli_certificate->file_size = $model_compli_certificate_fileSize;
                    $model_compli_certificate->uploaded_file = $model_compli_certificate_fileContent;
                    // dd($vehicle_img);
                    $model_compli_certificate->save();
                    $oemModelDetail->compliance_upload_id = $model_compli_certificate->id;

                }
                // }

                $oemModelDetail->save();

                if ($request->status == 'S') {
                    // dd($request->status,$id,$request->model_id);
                    $oemModelmaster = OemModelDetail::find($request->id);
                    $oemModelmaster->status = 'S';
                    $oemModelmaster->submitted_at = Carbon::now();
                    $oemModelmaster->save();
                }
            });

            alert()->success('Record Updated Successfully', 'Success!')->persistent('Close');
            // return redirect()->back();
            return redirect()->route('oemModel.index');
        } catch (Exception $e) {
            dd($e);
            alert()->error('Something Went Wrong', 'warning!')->persistent('Close');
            // errorMail($e, $request->app_id, Auth::user()->id);
            return redirect()->back();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }


    public function final_submit($id)
    {
        $oemModelmaster = OemModelDetail::find($id);
        $oemModelmaster->status = 'S';
        $oemModelmaster->submitted_at = Carbon::now();
        $oemModelmaster->save();
        return redirect()->route('oemModel.index');

    }

    public function get_category($data)
    {
        $options = '<option selected disabled value="">Choose...</option>'; // Default option
        if (!empty ($data)) {
            $categories = DB::table('category_master')->where('segment_id', $data)->where('active', '1')->get();
            foreach ($categories as $category) {
                $options .= '<option value="' . $category->id . '">' . $category->category_name . '</option>';
            }
        }
        return $options;
    }

    public function calculate_incentive_amt(Request $request)
    {
        $ex_factory = $request->input('ex_factory');
        $tot_energy = $request->input('tot_energy');
        $cat_id = $request->input('cat_id');
        // dd($ex_factory,$tot_energy,$cat_id);
        if ($ex_factory && $tot_energy && $cat_id) {
            $result = DB::select("SELECT estimated_incentive_amount(?, ?, ?) AS result", [$ex_factory, $tot_energy, $cat_id]);
            return $result;
        }
    }


}
